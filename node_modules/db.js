module.exports = function() { // module start


Date.prototype.add = function(add) { return new Date(this.getTime() + add); };

var db = require('mysql-promise') (),
	bb = require('bluebird');

db.configure({
	host: 'yhaskell.cloudapp.net', 
	user: 'thirteen',
	password: 'thirteen', 
	database: 'thirteen' 
});


/* users and sessions manipulation */

this.register = bb.promisify(function(email, password, callback) {	
	db.query('select id from users where email=?', [email])
		.then(function(rows) {
			if (rows[0].length !== 0) return callback("This email has been taken");
				db.query('insert into users (email, password) values (?, PASSWORD(?))', [email, password])
					.then(function(rows) { callback(undefined, rows[0].insertId); });
		});
});

this.auth = bb.promisify(function(email, password, callback) {
	db.query('select id from users where email=? and password=PASSWORD(?)', [email, password])
		.then(function(rows) {			
			if (rows[0].length === 0) return callback('Incorrect username or password.');
			
			var expires = new Date().add(1000 * 3600), // +1 hour
				owner  = rows[0][0].id;
			db.query('insert into sessions (owner, expires) values(?, ?)', [owner, expires])
				.then(function(rows) {
					callback(undefined, { id: rows[0].insertId, owner: owner, expires: expires });
				});
			});						
});

this.handshake = bb.promisify(function(session, callback) {
	db.query('select * from sessions where id=?', [session])
		.then(function(rows) {
			if (rows[0].length === 0) return callback('Session not found');

			db.query('update sessions set expires=? where id=?', [new Date().add(3600 * 1000), session])
				.then(function() {
					callback(undefined, { session: rows[0][0].id, owner: rows[0][0].owner });					
				});
		});
});

this.profile = {
	get: bb.promisify(function(userId, callback) {
		db.query('select * from users where id=?', [userId])
			.then(function(rows) {
				if (rows[0].length === 0) callback('User not found');
				else {
					delete rows[0][0].password;
					callback(undefined, rows[0][0]);
				} 
			});
	}),
	set: bb.promisify(function(id, nick, realname, callback) {
		db.query('update users set nick=?, realname=? where id=?', [nick, realname, id])
			.then(function(data) {
				if (data[0].affectedRows === 0) callback('User not found');
				else callback(); 
			});
	})
};


/* images manipulation */

this.images = {
	add: bb.promisify(function(owner, path, callback) {
		db.query('insert into images (owner, path, type, likes, comments) values (?, ?, -1, 0, 0)', [owner, path])
			.then(function (rows) {
				callback(undefined, rows[0].insertId);
			});
	}),
	update: bb.promisify(function(id, desc, type, tags, callback) {
		db.query('update images set type=?, description=? where id=?', [type, escape(desc), id])
			.then(function(rows) {
				if (rows[0].changedRows === 0) return callback('Image not found');
				
				db.query('delete from tags where image=?', [id]);

				tags.forEach(function(tag) {
					db.query('insert into tags (image, tag) values (?, ?)', [id, tag]);
				});
			});
	}),
	get: bb.promisify(function(id, callback) {
		db.query('select * from images where id=?', [id])
			.then(function(data) {
				if (data[0].length === 0) return callback('Image not found');
				data[0][0].description = unescape(data[0][0].description);
				callback(undefined, data[0][0]);
			});
	})
};

















}; // module end