module.exports = function() { // module start


Date.prototype.add = function(add) { return new Date(this.getTime() + add); };

var db = require('mysql-promise') (),
	bb = require('bluebird');

db.configure({
	host: 'yhaskell.cloudapp.net', 
	user: 'thirteen',
	password: 'thirteen', 
	database: 'thirteen' 
});


var that = this;

/* users and sessions manipulation */

this.register = bb.promisify(function(email, password, callback) {	
	db.query('select id from users where email=?', [email])
		.then(function(rows) {
			if (rows[0].length !== 0) return callback("This email has been taken");
				db.query('insert into users (email, password) values (?, PASSWORD(?))', [email, password])
					.then(function(rows) { callback(undefined, rows[0].insertId); });
		});
});

this.auth = bb.promisify(function(email, password, callback) {
	db.query('select id from users where email=? and password=PASSWORD(?)', [email, password])
		.then(function(rows) {			
			if (rows[0].length === 0) return callback('Incorrect username or password.');
			
			var expires = new Date().add(1000 * 3600), // +1 hour
				owner  = rows[0][0].id;
			db.query('insert into sessions (owner, expires) values(?, ?)', [owner, expires])
				.then(function(rows) {
					callback(undefined, { id: rows[0].insertId, owner: owner, expires: expires });
				});
			});						
});

this.handshake = bb.promisify(function(session, callback) {
	db.query('select * from sessions where id=?', [session])
		.then(function(rows) {
			if (rows[0].length === 0) return callback('Session not found');

			db.query('update sessions set expires=? where id=?', [new Date().add(3600 * 1000), session])
				.then(function() {
					callback(undefined, { session: rows[0][0].id, owner: rows[0][0].owner });					
				});
		});
});

this.profile = {
	get: bb.promisify(function(userId, callback) {
		db.query('select * from users where id=?', [userId])
			.then(function(rows) {
				if (rows[0].length === 0) callback('User not found');
				else {
					delete rows[0][0].password;
					callback(undefined, rows[0][0]);
				} 
			});
	}),
	set: bb.promisify(function(id, nick, realname, callback) {
		db.query('update users set nick=?, realname=? where id=?', [nick, realname, id])
			.then(function(data) {
				if (data[0].affectedRows === 0) callback('User not found');
				else callback(); 
			});
	})
};


/* images manipulation */

this.images = {
	add: bb.promisify(function(owner, path, callback) {
		db.query('insert into images (owner, path, type, likes, comments) values (?, ?, -1, 0, 0)', [owner, path])
			.then(function (rows) {
				callback(undefined, rows[0].insertId);
			});
	}),
	update: bb.promisify(function(id, desc, type, tags, callback) {
		db.query('update images set type=?, description=? where id=?', [type, escape(desc), id])
			.then(function(rows) {
				if (rows[0].changedRows === 0) return callback('Image not found');
				
				db.query('delete from tags where image=?', [id]);

				tags.forEach(function(tag) {
					db.query('insert into tags (image, tag) values (?, ?)', [id, tag]);
				});
			});
	}),
	get: bb.promisify(function(id, callback) {
		db.query('select * from images where id=?', [id])
			.then(function(data) {
				if (data[0].length === 0) return callback('Image not found');

				var res = data[0][0];

				res.description = unescape(res.description);

				that.profile.get(res.owner).then(function(data) {
					res.owner = data;
					callback(undefined, res);	
				});

				
			});
	}),
	by: bb.promisify(function(id, callback) {
		db.query('select * from images where owner=?', [id])
			.then(function (data) {
				callback(undefined, data[0]);
			});
		}),
	byTag: bb.promisify(function(tag, callback) {
		db.query('select i.* from images i join tags t on i.id = t.image where t.tag=?', [tag])
			.then(function(data) {
				callback(undefined, data[0]);
			});
	})
};

this.like = bb.promisify(function(image, owner, callback) {
	db.query('delete from likes where image=? and owner=?', [image, owner])
		.then(function(data) {
			if (data[0].affectedRows === 0) {
				db.query('insert into likes (image, owner) values (?,?)', [image, owner])
					.then(function() {
						db.query('select count(*) as count from likes where image=?', [image])
							.then(function(data) {
								db.query('update images set likes=? where id=?', [data[0][0].count, image])
									.then(function() {
										callback(undefined, data[0][0].count);		
									});
								
							});
					});
			}
		});
});

this.comments = {
	get: bb.promisify(function(image, callback) {
		db.query('select * from comments c inner join users u on c.owner = u.id where image=?', [image])
			.then(function(data) {
				callback(undefined, data[0]);
			});
	}),

	put: bb.promisify(function(image, owner, comment, callback) {
		db.query('insert into comments (image, owner, `text`) values (?, ?, ?)', [image, owner, escape(comment)])
			.then(function() {
				db.query('update images set comments=comments+1 where id=?', [image])
					.then(function() {
						callback();
					});
			 });



	})
};

this.cloud = bb.promisify(function(callback) {
	 db.query('select tag, count(*) count from tags group by tag')
	 	.then(function(data) {
	 		callback(undefined, data[0]);
	 	});
});

this.featured = bb.promisify(function(callback) {
	db.query('select id, path from images order by likes desc limit 1,16')
		.then(function(data){
			callback(undefined, data[0]);
		});
});

}; // module end