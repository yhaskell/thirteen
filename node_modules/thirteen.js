var http    = require("http"),
	parser  = require("url"),
	fs      = require("fs"),
	cookie  = require("cookie"),	
    qstring = require("querystring"),
    db      = require("db"),
    bb      = require("bluebird");

var log = function(args) {
	var string = arguments[0];
	for (var i = 1; i < arguments.length; i++) {
		string += ' ' + arguments[i];
	}

	console.error(new Date().toLocaleTimeString(), string);		
};

module.exports = function(req, rsp) {
	var that = this;
	that.request = req;
	that.response = rsp;

	that.response.__end__ = that.response.end;

	that.response.end  = function(obj) { 
		that.response.__end__(obj);
		that.log(req.method, req.url, rsp.statusCode, http.STATUS_CODES[rsp.statusCode]);
	};
	that.response.endj = function(obj) { rsp.end(JSON.stringify(obj)); };

	that.cookie = cookie;

	if (req.headers.cookie)
		that.cookies = cookie.parse(req.headers.cookie);
	else that.cookies = [];


	that.log = log;

	that.post = bb.promisify(function(callback) {
	    var queryData = "";
        
        that.request.on('data', function(data) { queryData += data; });

        that.request.on('end', function() {        
            that.request.post = qstring.parse(queryData);
            callback();
        });	  
	});

	that.route = function(url) {
		var parsed = parser.parse(url, true);


		var pname = parsed.pathname;

		var api = false;

		if (pname.indexOf('/api/') >= 0) {
			api = true;
			pname = pname.substring(4);
		}
		
		var elems = pname.substring(1).split('/');

		var route = { controller: elems[0], action: elems[1], id: elems[2] };
		var a, c;
		var i;

		switch (elems.length) {
			case 0: break;
			case 1:
				if (elems[0] !== '') c = elems[0];
				break;
			case 2:
				c = elems[0];
				
				if (typeof(elems[1]) == "number")
					i = elems[1];				
				else 
					a = elems[1];
				break;
			case 3:
				c = elems[0];
				a = elems[1];				
				i = elems[2] === '' ? undefined : elems[2];

				break;
			default:
				throw new Error("Incorrect route string");
		}
		var ret = {
			route: "dynamic",
			path: api ? undefined : pname,
			controller: c,
			action: a,
			id: i,
		};

		Object.keys(parsed.query).forEach(function (el) {
			ret[el] = parsed.query[el];
		});

		return ret;
	};

	that.controller = function(route) {
		this.request = that.request;
		this.response = that.response;
		this.route = route;
		this.thirteen = that;

		if (route.controller === undefined) route.controller = '__default__';

		this.actions = require("../controllers/" + (route.path ? '' : 'api/') + route.controller);	

		this.execute = function() {
			if (route.action === undefined) route.action = '__default__';

			if (!this.actions[route.action]) {
				var err = new Error("Action " + route.action + " not found.");
				err.code = 'ACTION_NOT_FOUND';
				throw err;
			}

			try {
				var action = this.actions[route.action].bind(this);
				action(route.id);
			} catch (e) {
				throw new EvalError(e);
			}
		};

		this.render = function() {
			var fname = "./views/" + route.controller + "/" + route.action + ".html";

			fs.readFile(fname, function(err, contents)
			{
				if (err)
					throw new Error(err);
				else
					that.response.end(contents);
			});
		};
	};

	this.db = new db();
	
};

module.exports.log = log;